package hackyeaster2019

object Egg22RanDee extends App {

  val n0 = BigInt("5613358668671613665566510382994441407219432062998832523305840186970780370368271618683122274081615792349154210168307159475914213081021759597948038689876676892007399580995868266543309872185843728429426430822156211839073")
  val n1 = BigInt("43197226819995414250880489055413585390503681019180594772781599842207471693041753129885439403306011423063922105541557658194092177558145184151460920732675652134876335722840331008185551706229533179802997366680787866083523")
  val n2 = BigInt("10603199174122839808738169357706062732533966731323858892743816728206914395320609331466257631096646511986506501272036007668358071304364156150345138983648630874220488837685118753574424686204595981514561343227316297317899")

  val c0 = BigInt("4870848362302190038444777237783773762989130424052097020657841660502972144445923614388484256730535971521519431799627785375106287039267168740424012477722145444567771983730549192737704000541149116222676893530432722372149")
  val c1 = BigInt("28181072004973949938546689607280132733514376641605169495754912428335704118088087978918344741937618706192728369992365104786854427689675673204353839263196581517462813454954645956569721549887573594597053350585038195786183")
  val c2 = BigInt("883895515518702990157008398945175622369348177479273727666188822384515278346091231223228633562286443126634960286337962216299566852261275189679618639468100617409385486757117996512128227299052476236805574920658456448123")

  // find factors
  val f0 = gcd(n0, n1)
  val f1 = gcd(n0, n2)
  val f2 = gcd(n1, n2)

  assert(n0 == f0 * f1)
  assert(n1 == f0 * f2)
  assert(n2 == f1 * f2)

  val message = decrypt(c0, (f0, f1), 65537)

  println(message)

  def decrypt(ciphertext: BigInt, factors: (BigInt, BigInt), e: BigInt): String = {
    val p = factors._1
    val q = factors._2
    val n = p * q

    // calculate phi
    val phi = lcm(p - 1, q - 1)
    assert(e.gcd(phi) == 1, "e and phi are not coprimes")

    // d * e â‰¡ 1 (mod phi)
    val d = e.modInverse(phi)
    assert((d * e).mod(phi).equals(1), "d is not e inverted")

    ascii(ciphertext.modPow(d, n).toByteArray)
  }

}
